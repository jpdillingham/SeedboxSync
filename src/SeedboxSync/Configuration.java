/****************************************************************************
 *
 * Configuration.java
 *
 * Represents the application Configuration models.
 *
 ***************************************************************************
 *
 * Copyright (C) 2016 JP Dillingham (jp@dillingham.ws)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 ****************************************************************************/

/**
 * Represents the application Configuration model.
 */
public class Configuration {
    /**
     * The server address.
     */
    private String server;

    /**
     * The The server port.
     */
    private Integer port;

    /**
     * The username for the server.
     */
    private String username;

    /**
     * The password for the server.
     */
    private String password;

    /**
     * The interval on which synchronization should take place.
     */
    private Integer interval;

    /**
     * The remote download directory which is to be synchronized.
     */
    private String remoteDownloadDirectory;

    /**
     * The local directory to which files are to be downloaded.
     */
    private String localDownloadDirectory;

    /**
     * The remote directory to which synchronized files are to be uploaded.
     */
    private String remoteUploadDirectory;

    /**
     * The local directory from which files are to be uploaded.
     */
    private String localUploadDirectory;

    /**
     * The message generated by the validation routine.
     */
    private String validationMessage;

    /**
     * Initializes a new instance of the Configuration class with the specified parameters.
     * @param server The server address.
     * @param port The server port.
     * @param username The username for the server.
     * @param password The password for the server.
     * @param interval The interval on which synchronization should take place.
     * @param remoteDownloadDirectory The remote download directory which is to be synchronized.
     * @param localDownloadDirectory The local directory to which files are to be downloaded.
     * @param remoteUploadDirectory The remote directory to which synchronized files are to be uploaded.
     * @param localUploadDirectory The local directory from which files are to be uploaded.
     */
    public Configuration(String server, Integer port, String username, String password, Integer interval,
                         String remoteDownloadDirectory, String localDownloadDirectory, String remoteUploadDirectory,
                         String localUploadDirectory) {
        this.server = server;
        this.port = port;
        this.username = username;
        this.password = password;
        this.interval = interval;
        this.remoteDownloadDirectory = remoteDownloadDirectory;
        this.localDownloadDirectory = localDownloadDirectory;
        this.remoteUploadDirectory = remoteUploadDirectory;
        this.localUploadDirectory = localUploadDirectory;
    }

    /**
     * Gets the server address.
     * @return The server address.
     */
    public String getServer() {
        return server;
    }

    /**
     * Gets the server port.
     * @return The server port.
     */
    public Integer getPort() {
        return port;
    }

    /**
     * Gets the username for the server.
     * @return The username for the server.
     */
    public String getUsername() {
        return username;
    }

    /**
     * Gets the password for the server.
     * @return The password for the server.
     */
    public String getPassword() {
        return password;
    }

    /**
     * Gets the interval on which the synchronization should take place.
     * @return The interval on which the synchronization should take place.
     */
    public Integer getInterval() {
        return interval;
    }

    /**
     * Gets the remote directory which is to be synchronized.
     * @return The remote directory which is to be synchronized.
     */
    public String getRemoteDownloadDirectory() {
        return remoteDownloadDirectory;
    }

    /**
     * Gets the local directory to which files are to be downloaded.
     * @return The local directory to which files are to be downloaded.
     */
    public String getLocalDownloadDirectory() {
        return localDownloadDirectory;
    }

    /**
     * Sets the local directory to which files are to be downloaded.
     * @param directory The full path to the directory.
     */
    public void setLocalDownloadDirectory(String directory) { localDownloadDirectory = directory; }

    /**
     * Gets the remote directory to which files are uploaded.
     * @return The remote directory to which files are uploaded.
     */
    public String getRemoteUploadDirectory() { return remoteUploadDirectory; }

    /**
     * Gets the local directory from which files are uploaded.
     * @return The local directory from which files are uploaded.
     */
    public String getLocalUploadDirectory() { return localUploadDirectory; }

    /**
     * Sets the local upload directory from which files are uploaded.
     * @param directory The full path to the directory.
     */
    public void setLocalUploadDirectory(String directory) { localUploadDirectory = directory; }

    /**
     * Gets the message generated by the validation routine.
     * @return The message generated by the validation routine.
     */
    public String getValidationMessage() { return validationMessage; }

    /**
     * Returns a value indicating whether the configuration is valid.
     * @return A value indicating whether the configuration is valid.
     */
    public Boolean isValid() {
        String err = "";

        if (server == null || server.equals("")) {
            err = "Server is missing or blank.";
        }
        else if (port == null || port <= 0) {
            err = "Server port is null or invalid.";
        }
        else if (username == null || username.equals("")) {
            err = "Username is missing or blank.";
        }
        else if (password == null) {
            err = "Password is missing.";
        }
        else if (interval == null || interval <= 0) {
            err = "Interval is missing or too low.";
        }
        else if (remoteDownloadDirectory == null || remoteDownloadDirectory.equals("")) {
            err = "Remote download directory is missing or blank.";
        }
        else if (localDownloadDirectory == null || localDownloadDirectory.equals("")) {
            err = "Local download directory is missing or blank.";
        }
        else if (!(new java.io.File(localDownloadDirectory).exists())) {
            err = "Local download directory '" + localDownloadDirectory + "' could not be found.";
        }
        else if (remoteUploadDirectory == null || remoteUploadDirectory.equals("")) {
            err = "Remote upload directory is missing or blank.";
        }
        else if (localUploadDirectory == null || localUploadDirectory.equals("")) {
            err = "Local upload directory is missing or blank.";
        }
        else if (!(new java.io.File(localUploadDirectory).exists())) {
            err = "Local upload directory '" + localUploadDirectory + "' could not be found.";
        }

        if (!err.equals("")) {
            validationMessage = err;
            return false;
        }

        return true;
    }
}
